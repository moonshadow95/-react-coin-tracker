{"version":3,"sources":["api.ts","routes/Coins.tsx","atoms.ts","routes/Chart.tsx","routes/Coin.tsx","Router.tsx","theme.ts","App.js","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","Container","styled","div","Header","header","CoinList","ul","Coin","li","props","theme","cardBgColor","textColor","accentColor","Title","Loader","span","Img","img","Coins","useQuery","isLoading","data","slice","map","coin","key","id","to","pathname","state","name","rank","src","symbol","toLocaleLowerCase","alt","isDarkAtom","atom","default","Chart","coinId","isDark","useRecoilValue","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","type","height","options","chart","foreColor","title","text","align","xaxis","yaxis","tooltip","enabled","series","x","time_open","y","open","high","low","close","item","toFixed","h1","Overview","OverviewItem","Description","p","BackButton","button","useParams","useLocation","useMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinPrice","tickersLoading","tickersData","loading","navigate","useNavigate","console","log","onClick","quotes","USD","price","description","total_supply","max_supply","Router","basename","process","path","element","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","ThemeToggle","App","setDarkAtom","useSetRecoilState","prev","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.b171eed4.chunk.js","sourcesContent":["const BASE_URL = 'https://api.coinpaprika.com/v1'\n\nexport function fetchCoins() {\n    return fetch(`${BASE_URL}/coins`)\n        .then(response => response.json())\n}\n\nexport function fetchCoinInfo(coinId: string) {\n    return fetch(`${BASE_URL}/coins/${coinId}`)\n        .then(response => response.json())\n}\n\nexport function fetchCoinPrice(coinId: string) {\n    return fetch(`${BASE_URL}/tickers/${coinId}`)\n        .then(response => response.json())\n}\n\nexport function fetchCoinHistory(coinId?: string) {\n    const endDate = Math.floor(Date.now() / 1000)\n    const startDate = endDate - 60 * 60 * 24 * 7 * 2\n    return fetch(`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`)\n        .then(response => response.json())\n}\n","import React from 'react'\nimport styled from \"styled-components\"\nimport {Link} from \"react-router-dom\"\nimport {useQuery} from \"react-query\"\nimport {fetchCoins} from \"../api\"\nimport {Helmet} from \"react-helmet-async\"\n\nconst Container = styled.div`\n  padding: 0 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`\n\nconst Header = styled.header`\n  height: 10vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst CoinList = styled.ul``\n\nconst Coin = styled.li`\n  background-color: ${props => props.theme.cardBgColor};\n  color: ${props => props.theme.textColor};\n  border: 1px solid;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  font-size: 24px;\n\n  a {\n    transition: color 150ms ease-in;\n    padding: 20px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n\n    &:hover {\n      color: ${props => props.theme.accentColor}\n    }\n  }\n`\n\nconst Title = styled.div`\n  font-size: 48px;\n  color: ${props => props.theme.accentColor};\n`\n\nconst Loader = styled.span`\n  font-size: 32px;\n  color: ${props => props.theme.accentColor};\n`\n\nconst Img = styled.img`\n  width: 32px;\n  height: 32px;\n`\n\ninterface ICoin {\n    \"id\": string\n    \"name\": string\n    \"symbol\": string\n    \"rank\": number\n    \"is_new\": boolean\n    \"is_active\": boolean\n    \"type\": string\n}\n\nconst Coins = () => {\n    const {isLoading, data} = useQuery<ICoin[]>(\"allCoins\", fetchCoins)\n    return (\n        <Container>\n            <Helmet>\n                <title>Coin Tracker</title>\n            </Helmet>\n            <Header>\n                <Title>Coin Tracker</Title>\n            </Header>\n            {isLoading ?\n                <Loader>Loading...</Loader> :\n                (<CoinList>\n                    {data?.slice(0, 29).map(coin =>\n                        <Coin key={coin.id}>\n                            <Link to={{\n                                pathname: `/${coin.id}`\n                            }} state={{\n                                name: coin.name, rank: coin.rank\n                            }}>{\n                                <Img\n                                    src={`https://coinicons-api.vercel.app/api/icon/${coin.symbol.toLocaleLowerCase()}`}\n                                    alt=\"Coin's icon\"/>\n                            } {coin.name} &rarr;</Link>\n                        </Coin>)\n                    }\n                </CoinList>)}\n        </Container>\n    );\n}\n\nexport default Coins;\n","import {atom} from \"recoil\";\n\nexport const isDarkAtom = atom({\n    key: 'isDark',\n    default: true\n})\n","import React from 'react';\nimport {useOutletContext} from \"react-router-dom\";\nimport {useQuery} from \"react-query\";\nimport {fetchCoinHistory} from \"../api\";\nimport ApexChart from 'react-apexcharts'\nimport {useRecoilValue} from \"recoil\";\nimport {isDarkAtom} from \"../atoms\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  margin-top: 40px;\n\n  .apexcharts-tooltip {\n    background: whitesmoke;\n    color: #000;\n  }\n`\n\ninterface IHistorical {\n    time_open: string\n    time_close: string\n    open: number\n    high: number\n    low: number\n    close: number\n    volume: number\n    market_cap: number\n    map: any\n    slice: any\n}\n\ninterface IChartProps {\n    coinId?: string\n}\n\nconst Chart = ({coinId}: IChartProps) => {\n    const isDark = useRecoilValue(isDarkAtom)\n    const {\n        isLoading, data\n    } = useQuery<IHistorical>([\"ohlcv\", coinId], () => fetchCoinHistory(coinId))\n    return (\n        <Container>{isLoading ? \"Loading Chart...\" :\n            <ApexChart\n                type='candlestick'\n                height={500}\n                options={{\n                    chart: {\n                        type: 'candlestick',\n                        height: 500,\n                        foreColor: isDark ? '#fff' : '#000',\n                    },\n                    title: {\n                        text: coinId,\n                        align: 'left',\n                    },\n                    xaxis: {\n                        type: 'datetime',\n                    },\n                    yaxis: {\n                        tooltip: {\n                            enabled: true,\n                        },\n                    },\n                    tooltip: {\n                        enabled: true,\n                    },\n                }}\n                series={[{\n                    data: data?.map((data: any) => {\n                        const x = new Date(data.time_open)\n                        const y = [data.open, data.high, data.low, data.close].map((item: any) => item.toFixed(2))\n                        return {x, y}\n                    }),\n                }]}\n            />}\n        </Container>\n    );\n}\n\nexport default Chart;\n","import React from \"react\";\nimport {useLocation, useParams, useMatch, useNavigate} from \"react-router\";\nimport styled from \"styled-components\";\nimport {useQuery} from \"react-query\";\nimport {fetchCoinInfo, fetchCoinPrice} from \"../api\";\nimport {Helmet} from \"react-helmet-async\";\nimport Chart from \"./Chart\";\n\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Container = styled.div`\n  padding: 0 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  position: relative;\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.2);\n  padding: 16px 32px;\n  border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0;\n  line-height: 1.4rem;\n`;\n\nconst BackButton = styled.button`\n  position: absolute;\n  left: 0;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 80px;\n  height: 40px;\n  padding: 8px 14px;\n  font-size: 20px;\n  background-color: rgba(0, 0, 0, 0.2);\n  border-radius: 10px;\n  border-color: #fff;\n  cursor: pointer;\n`\n\ninterface RouteParams {\n    coinId?: string\n}\n\ninterface RouteState {\n    state: {\n        name: string\n    }\n}\n\ninterface IInfo {\n    id: string\n    name: string\n    symbol: string\n    rank: number\n    is_new: boolean\n    is_active: boolean\n    type: string\n    description: string\n    message: string\n    open_source: boolean\n    started_at: string\n    development_status: string\n    hardware_wallet: boolean\n    proof_type: string\n    org_structure: string\n    hash_algorithm: string\n    first_data_at: string\n    last_data_at: string\n}\n\ninterface IPrice {\n    id: string\n    name: string\n    symbol: string\n    rank: number\n    circulating_supply: number\n    total_supply: number\n    max_supply: number\n    beta_value: number\n    first_data_at: string\n    last_updated: string\n    quotes: {\n        USD: {\n            ath_date: string\n            ath_price: number\n            market_cap: number\n            market_cap_change_24h: number\n            percent_change_1h: number\n            percent_change_1y: number\n            percent_change_6h: number\n            percent_change_7d: number\n            percent_change_12h: number\n            percent_change_15m: number\n            percent_change_24h: number\n            percent_change_30d: number\n            percent_change_30m: number\n            percent_from_price_ath: number\n            price: number\n            volume_24h: number\n            volume_24h_change_24h: number\n        };\n    };\n}\n\ninterface ICoinProps {\n}\n\nfunction Coin({}: ICoinProps) {\n    const {coinId} = useParams() as RouteParams;\n    const {state} = useLocation() as RouteState;\n    const priceMatch = useMatch(\"/:coinId/price\")\n    const chartMatch = useMatch(\"/:coinId/chart\")\n    const {\n        isLoading: infoLoading,\n        data: infoData\n    } = useQuery<IInfo>([\"info\", coinId], () => fetchCoinInfo(coinId!))\n    const {\n        isLoading: tickersLoading,\n        data: tickersData\n    } = useQuery<IPrice>([\"tickers\", coinId], () => fetchCoinPrice(coinId!),\n        // {refetchInterval: 1000,}\n    )\n    const loading = infoLoading || tickersLoading\n    const navigate = useNavigate()\n    console.log(infoData, tickersData)\n    return (\n        <Container>\n            <Helmet>\n                <title>{state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}</title>\n            </Helmet>\n            <Header>\n                <BackButton onClick={() => navigate('/')}>&larr;</BackButton>\n                <Title>\n                    {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n                </Title>\n            </Header>\n            {loading ? (\n                <Loader>Loading...</Loader>\n            ) : (\n                <>\n                    <Overview>\n                        <OverviewItem>\n                            <span>Rank:</span>\n                            <span>{infoData?.rank}</span>\n                        </OverviewItem>\n                        <OverviewItem>\n                            <span>Symbol:</span>\n                            <span>${infoData?.symbol}</span>\n                        </OverviewItem>\n                        <OverviewItem>\n                            <span>Price:</span>\n                            <span>{tickersData?.quotes.USD.price}</span>\n                        </OverviewItem>\n                    </Overview>\n                    <Description>{infoData?.description}</Description>\n                    <Overview>\n                        <OverviewItem>\n                            <span>Total Supply:</span>\n                            <span>{tickersData?.total_supply}</span>\n                        </OverviewItem>\n                        <OverviewItem>\n                            <span>Max Supply:</span>\n                            <span>{tickersData?.max_supply}</span>\n                        </OverviewItem>\n                    </Overview>\n                    <Chart coinId={coinId}/>\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default Coin;\n","import React from 'react';\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\nimport Coins from \"./routes/Coins\";\nimport Coin from \"./routes/Coin\";\n\ninterface IRouterProps {\n}\n\nconst Router = ({}: IRouterProps) => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Routes>\n            <Route path='/' element={<Coins/>}/>\n            <Route path='/:coinId' element={<Coin/>}/>\n        </Routes>\n    </BrowserRouter>\n);\n\nexport default Router;\n","import {DefaultTheme} from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n    bgColor: \"#2f3640\",\n    textColor: \"white\",\n    accentColor: \"#9c88ff\",\n    cardBgColor: \"transparent\",\n};\n\nexport const lightTheme: DefaultTheme = {\n    bgColor: \"whitesmoke\",\n    textColor: \"black\",\n    accentColor: \"#9c88ff\",\n    cardBgColor: \"white\",\n};\n","import React, {useState} from 'react';\nimport Router from \"./Router\";\nimport styled, {ThemeProvider} from \"styled-components\";\nimport {lightTheme, darkTheme} from \"./theme\";\nimport {createGlobalStyle} from \"styled-components\";\nimport {ReactQueryDevtools} from \"react-query/devtools\";\nimport {useRecoilValue, useSetRecoilState} from \"recoil\";\nimport {isDarkAtom} from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@500;700&family=Noto+Sans:wght@700&display=swap');\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n\n  body {\n    line-height: 1;\n    font-family: 'Noto Sans KR', sans-serif;\n    background-color: ${props => props.theme.bgColor};\n    color: ${props => props.theme.textColor};\n\n    ol, ul {\n      list-style: none;\n    }\n\n    blockquote, q {\n      quotes: none;\n    }\n\n    blockquote:before, blockquote:after,\n    q:before, q:after {\n      content: '';\n      content: none;\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    table {\n      border-collapse: collapse;\n      border-spacing: 0;\n    }\n\n    a {\n      text-decoration: none;\n      color: inherit;\n    }\n  }\n`\nconst ThemeToggle = styled.button`\n  position: absolute;\n  right: 0;\n  top: 0;\n  margin: 20px;\n  cursor: pointer;\n  background: ${props => props.theme.cardBgColor};\n  color: ${props => props.theme.textColor};\n  border: 1px solid;\n  padding: 10px 14px;\n`\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom)\n  const setDarkAtom = useSetRecoilState(isDarkAtom)\n  const toggleDarkAtom = () => setDarkAtom(prev => !prev)\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle/>\n        <ThemeToggle onClick={toggleDarkAtom}>{isDark ? 'Dark' : 'Light'}</ThemeToggle>\n        <Router/>\n        <ReactQueryDevtools initialIsOpen={false}/>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {QueryClient, QueryClientProvider} from \"react-query\";\nimport {HelmetProvider} from \"react-helmet-async\";\nimport {RecoilRoot} from \"recoil\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <QueryClientProvider client={queryClient}>\n                <HelmetProvider>\n                    <App/>\n                </HelmetProvider>\n            </QueryClientProvider>\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}